import os
import subprocess
import google.auth
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# Define constants
CLIENT_SECRETS_FILE = "client_secrets.json"
API_SERVICE_NAME = "youtube"
API_VERSION = "v3"

# Check if termcolor is installed, install if necessary
try:
    import termcolor
except ImportError:
    print("termcolor needs to be installed! Install it? y/n")
    while 1:
        answer = input(">>> ")
        if answer == "y":
            os.system("pip3 install termcolor")
            break
        elif answer == "n":
            print("Aborting...")
            break
        else:
            print("Invalid input!")

# Set up authorization credentials
creds = None
if os.path.exists("token.json"):
    creds = Credentials.from_authorized_user_file("token.json")
if not creds or not creds.valid:
    if creds and creds.expired and creds.refresh_token:
        creds.refresh(Request())
    else:
        flow = google.auth.flow.InstalledAppFlow.from_client_secrets_file(
            CLIENT_SECRETS_FILE, ["https://www.googleapis.com/auth/youtube.upload"]
        )
        creds = flow.run_local_server(port=0)
    with open("token.json", "w") as token:
        token.write(creds.to_json())

# Prompt user for video information
print(termcolor.colored("Youtube", "red"))
print("----- Welcome to the uploader! -----")
print("")
path = input("What is the video path? ")
print("")
title = input("What do you want the title to be? ")
print("")
description = input("What do you want the description to be? ")
print("")
print("Note: Tags are not supported in this version.")
tags = ""

while True:
    is_public = input("Do you want the video to be public? (y/n) ")
    if is_public in ["y", "n"]:
        break
    else:
        print("Invalid input!")

# Upload video to YouTube
try:
    youtube = build(API_SERVICE_NAME, API_VERSION, credentials=creds)
    request_body = {
        "snippet": {
            "title": title,
            "description": description,
            "tags": tags.split(),
            "categoryId": "22",
        },
        "status": {
            "privacyStatus": "public" if is_public == "y" else "private",
        },
    }
    media_file = MediaFileUpload(path)
    response = (
        youtube.videos()
        .insert(part="snippet,status", body=request_body, media_body=media_file)
        .execute()
    )
    print(f"Video '{title}' was successfully uploaded to YouTube!")
except HttpError as error:
    print(f"An error occurred: {error}")
