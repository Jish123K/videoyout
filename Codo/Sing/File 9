import os

import click

from google.oauth2.credentials import Credentials

from googleapiclient.discovery import build

from googleapiclient.errors import HttpError

from googleapiclient.http import MediaFileUpload

# Constants

CLIENT_SECRETS_FILE = "client_secrets.json"

YOUTUBE_API_SERVICE_NAME = "youtube"

YOUTUBE_API_VERSION = "v3"

VALID_PRIVACY_STATUSES = ("public", "private", "unlisted")

# Helper function for retrieving credentials

def get_credentials():

    creds = None

    if os.path.exists('token.json'):

        creds = Credentials.from_authorized_user_file('token.json', scopes=[YOUTUBE_API_SERVICE_NAME])

    if not creds or not creds.valid:

        flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRETS_FILE, scopes=[YOUTUBE_API_SERVICE_NAME])

        creds = flow.run_local_server(port=0)

        with open('token.json', 'w') as token:

            token.write(creds.to_json())

    return creds

# Click CLI command for uploading a video

@click.command()

@click.option('--file', prompt='Enter the path of the video file', help='Path of video file to upload')

@click.option('--title', prompt='Enter the video title', help='Title of the video')

@click.option('--description', prompt='Enter the video description', help='Description of the video')

@click.option('--tags', prompt='Enter the video tags', help='Tags for the video')

@click.option('--privacy-status', prompt='Enter the privacy status of the video', type=click.Choice(VALID_PRIVACY_STATUSES, case_sensitive=False), default='unlisted', help='Privacy status of the video (public, private, or unlisted)')

def upload_video(file, title, description, tags, privacy_status):

    try:

        youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, credentials=get_credentials())

        media = MediaFileUpload(file)

        insert_request = youtube.videos().insert(

            part='snippet,status',

            body={

                'snippet': {

                    'title': title,

                    'description': description,

                    'tags': tags.split(','),

                    'categoryId': '22'

                },

                'status': {

                    'privacyStatus': privacy_status

                }

            },

            media_body=media

        )

        response = insert_request.execute()

        print(f'Video "{response["snippet"]["title"]}" uploaded successfully with video ID "{response["id"]}"!')

    except HttpError as e:

        print(f'An error occurred: {e}')

        response = None

    return response

if __name__ == '__main__':

    upload_video()
response = youtube.videos().insert(

part="snippet,status",

body=dict(

snippet=dict(

title=title,

description=description,

tags=tags,

categoryId=category

),

status=dict(

privacyStatus=privacy_status

)

),

media_body=MediaFileUpload(

file_path, chunksize=-1, resumable=True

)

)

graphql

Copy code

# Call the API's videos.insert method to upload the video.

insert_request = youtube.videos().insert(

    part=",".join(request_parts),

    body=request_body,

    media_body=MediaFileUpload(

        file_path, chunksize=chunksize, resumable=True

    )

)

# Use the API endpoint to begin uploading the video.

resumable_upload(insert_request)

if name == "main":

# Parse arguments from the command line.

args = argparser.parse_args()

python

Copy code

# Set up the credentials for the YouTube API.

youtube = get_authenticated_service(args)

# Upload the video to YouTube.

try:

    initialize_upload(args)

except HttpError as e:

    print("An HTTP error %d occurred:\n%s" % (e.resp.status, e.content))

else:

    response = request.execute()
print(response)
print("The video was successfully uploaded to YouTube!")
except HttpError as e:
if e.resp.status in RETRIABLE_STATUS_CODES:
error = "A retriable HTTP error {e.resp.status} occurred:\n{e.content}"
else:
raise
except RETRIABLE_EXCEPTIONS as e:
error = "A retriable error occurred: {e}"
if error is not None:
print(f"{error}.")
error = None
retry += 1
if retry > MAX_RETRIES:
print("No longer attempting to retry.")
break
max_sleep = 2 ** retry
sleep_seconds = random.random() * max_sleep
print(f"Sleeping {sleep_seconds} seconds and then retrying...")
time.sleep(sleep_seconds)
